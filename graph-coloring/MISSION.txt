***MISSION.txt***

Purpose:

    The purpose of this assignment is to get you comfortable using
pointers and structs in the C programming language, introduce you
to makefiles, and introduce you to the Unix command line. Although
you may have found C to be a bit annoying in CSC 172, it is a really
fast and powerful language to use once you are proficient at it, and
manipulating pointers and structs are at the core of C. Once you
understand pointers and structs more deeply, you will not only be
able to write more mature C programs, but you will also have a bit
of a grasp on how memory is organized within a program. In addition,
being able to read and write makefiles and being able to
use the Unix command line will enable you to write and test your
programs more efficiently and increase the scope of what you can
do with your computer programs.

Background and Mission:

    As you've learned in 172, a graph consists of a set of vertices and a 
set of edges that connect pairs of vertices. The vertices of a graph can be 
"colored" by assigning each vertex a unique color such that no two vertices that
are "next" to each other (i.e. are connected by an edge) share the same color.
We have given you a bunch of colored graphs. Some of the graphs have valid
colorings (where the rule above is followed), and some of the graphs
have invalid colorings. Your mission is, for each graph, to determine whether
or not the graph is colored correctly, and if a graph is colored incorrectly,
to output some information telling us which edges violate the rule above.

    To do this, we have given you a set of C files that are templated
with useful functions that will help you accomplish your mission. We have
also given you a makefile which you can use to compile your C code, along
with a suite of 170 randomly-generated test cases which you can use to check whether
your C code is correct. Your task is to complete the implementations 
of the C code we have given you so that you can tell whether graphs 
are colored correctly or not.

How to get started:

# Navigate to this directory on a Unix command-line
$ cd /path/to/this/directory
# Run the makefile to compile our sample code
$ make
# Run our grading script (our templated code doesn't work correctly,
    meaning if you submitted this project as is, you would get a 0).
$ ./grading_script.sh
# go back and edit the C files until they produce the correct output.

Each time you want to test your code, we recommend you run the makefile
and the grading script.

Description of files:

coloring (DOES NOT EXIST UNTIL YOU RUN MAKE!): Executable file that your
    C code should produce. For information on how to use, please see main.c.
grading_script.sh: our grading script. Run this file to get a rough estimate
    of your grade for this project if you were to submit your code now.
graph.c and graph.h (MODIFY THESE FILES): Contains structs and functions for manipulating
    the graph data structure. This includes creating graphs, finding the
    number of colors used to color the vertices, and finding out whether
    the graph is colored correctly.
main.c and main.h (MODIFY THESE FILES): Contains higher-level functions for reading a graph
    from stdin and writing your result to stdout.
MISSION.txt: this file.
makefile: Compiles your code for you. Although it is not necessary to
    modify this file, we highly recommend you look at it to get a sense
    of how makefiles are constructed. Makefiles are a *really* useful tool,
    so start investigating them now so that you know how to write one later.
tests/: folder containing the 170 test cases
    tests/in/: Input graphs.
    tests/out/: When you run the grading script, the graphs that your program
        produces as output will go here.
    tests/correct/: The correct answers your program should get when run
        on the input graphs. Our grading script will test whether the answers
        in this folder match the answers produced in the tests/out/ folder.
    tests/make_test.py: A useful Python script for creating more test cases.
        For information on how to run, open up the file and look at the comments
        at the top (you don't need any previous Python experience).
    tests/sample_in.txt: Structure of an input graph. All input graphs
        should follow this format.
    tests/sample_out.txt: Structure of an output file. All files
        that your program outputs should follow this format.
    tests/vertices.txt: A list of faculty and staff members of the CS
        department, used as names for vertices in our input graphs.
		
	Note that .h files are library files, so you should only edit them to update/add declarations.

Your grade:

    Your grade for this assignment will be based 85% on how many test
cases your program gets correct, 5% on how well you commented your code,
and 10% on your README file. You will receive 20% extra credit if you have
made good use of version control. If you want more extra credit, please
CLEARLY specify what extra things you have done in your README. Points
for commenting your code, README, and extra credit are at the sole discretion
of the grader.

    NOTE: We will grade your code on a Linux machine. Thus, please make sure
        your code runs on a Linux machine! We are not responsible for code
        that fails to compile/run on Linux.

    NOTE 2: If you decide to do things for extra credit or restructure
the project differently, PLEASE make sure that the grading script you were
given still works! (Otherwise you may not receive any credit for your test cases.)

How to submit:

    Before you submit this assignment, make sure that you have written your name and date at the top of
    main.c, main.h, graph.c, and graph.h, where it asks you to put your name and the date. Also,
    make sure you have a README file (as this is worth 10%)!

    To submit, make a ZIP file containing everything in the graph-coloring directory:
    $ zip -r graph-coloring.zip graph-coloring

    Then go to Blackboard to the CSC 173 Class homepage, navigate to Course Materials, and click on "C Week 2".
    Upload your ZIP file at the link before 11:00PM on Friday, September 18. Note that we will NOT be
    accepting any late submissions, so please make sure to submit something to Blackboard before this!
    Even if your implementation is incomplete, it is better to submit
    something before the due time than nothing, or else risk getting a 0 for this assignment.

How to get help:

    The primary contact for this assignment will be me, Hassler Thurston (jthurst3@u.rochester.edu). Please feel free
    to contact me with your questions, and please allow 24 hours for me to get back to you.
    HOWEVER, given the large volume of emails I have received pertaining to the first C assignment, 
    I would *really* appreciate if you did the following BEFORE emailing me:
        - Identify the problem or issue you are having
        - As long as it does not involve showing someone else your code, ask your friends/classmates
        - Check the assignment's FAQ page (http://csug.rochester.edu/u/jthurst3/173/graph-coloring-faq.html)
        to see if someone else already asked the same question. I will be updating this throughout the week
        with your questions.

    You may also come to CSUG Tutoring hours to get in-person, 1-on-1 help. Debugging questions are great
    for CSUG tutoring, but not great for email.
    
    I will also most likely be giving another tech seminar during class on Tuesday, September 15. I'll
    be going over more C, command-line, and version control basics. If you cannot attend class because of
    the Jewish holiday (or another reason), we will aim to publish a screencast of the seminar as soon
    as possible after class.

    Finally, PLEASE start this assignment early! It is much more difficult than
    the first C assignment and you only have one week to do it.
